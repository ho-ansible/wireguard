# {{ ansible_managed }}
{# Accumulate list of firewall rules #}
{% set spec_list = [] %}
{% for peer in q('inventory_hostnames', wg_peers) | sort
  if peer != inventory_hostname and hostvars[peer].wg_pubkey is defined %}
{%   set hv = hostvars[peer] %}
{%   set peer_port = hv.wg_port | d(wg_default_port, true) %}
{%   if hv.wg_ext_ip | d() %}
{%     set peer_ip = hv.wg_ext_ip | ipaddr('address') %}
{%     if hv.ansible_default_ipv4 is defined %}
{%       set peer_ip = peer_ip | d(hv.ansible_default_ipv4.address, true) %}
{%     endif %}
{%   endif %}
{%   set spec_list = spec_list.append((peer_ip | d(), peer_port)) %}
{% endfor %}
{# Macros #}
{% set ipt = '/usr/sbin/iptables' %}
{% set ch = 'in_' ~ wg_name %}
{% set in_rule = '-p udp --dport ' ~ (wg_port | d(wg_default_port, true)) ~ ' -j ' ~ ch %}

[Service]
# Prepare iptables chain {{ ch }}: create, flush, ref from INPUT
ExecStartPre=-{{ ipt }} -N {{ ch }}
ExecStartPre={{ ipt }} -F {{ ch }}
ExecStartPre=-{{ ipt }} -D INPUT {{ in_rule }}
ExecStartPre={{ ipt }} -A INPUT {{ in_rule }}
# Populate chain {{ ch }}
{% for ip, port in spec_list | sort | unique | reverse %}
{%   set ip = '-s ' ~ ip if ip | length else '' %}
ExecStartPre={{ ipt }} -A {{ ch }} {{ ip }} -p udp --sport {{ port }} -j ACCEPT
{% endfor %}
# Cleanup: unref, flush, delete
ExecStopPost=-{{ ipt }} -D INPUT {{ in_rule }}
ExecStopPost=-{{ ipt }} -F {{ ch }}
ExecStopPost=-{{ ipt }} -X {{ ch }}
